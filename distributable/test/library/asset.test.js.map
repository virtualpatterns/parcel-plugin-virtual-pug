{"version":3,"sources":["../../../source/test/library/asset.test.js"],"names":["test","bundler","Bundler","require","resolve","__dirname","bundle","local","default","virtualContentFn","virtualContent","map","realContent","toString","join","log","realContentFn","Pug","compileFile","is"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,kBAAK,2DAAL,EAAkE,MAAOA,IAAP,IAAgB;AAEhF,MAAIC,OAAO,GAAG,IAAIC,sBAAJ,CAAYC,OAAO,CAACC,OAAR,CAAgB,oBAAhB,CAAZ,EAAmD;AAC/D,aAAS,KADsD;AAE/D,cAAW,GAAEC,SAAU,SAFwC;AAG/D,eAAW,WAHoD;AAI/D,cAAU,MAJqD;AAK/D,aAAS,KALsD;AAM/D,gBAAY;AANmD,GAAnD,CAAd;AASA,QAAM,oBAAOJ,OAAP,CAAN;AACA,QAAMA,OAAO,CAACK,MAAR,EAAN;AAEA,MAAIC,KAAK,GAAG;AAAE,YAAQ;AAAV,GAAZ;AACA,MAAI;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAAgC,yBAAaN,OAAO,CAACC,OAAR,CAAgB,oBAAhB,CAAb,kDAApC;AAEA,MAAIM,cAAc,GAAG,IAArB;AACAA,EAAAA,cAAc,GAAGD,gBAAgB,CAACF,KAAD,CAAjC;AACAG,EAAAA,cAAc,GAAGA,cAAc,CAC5BC,GADc,CACTD,cAAD,IAAoB,4BAAkBA,cAAlB,CADV,EAEdC,GAFc,CAETC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,EAFP,EAGdC,IAHc,CAGT,IAHS,CAAjB;AAKAJ,EAAAA,cAAc,GAAG,qBAAOA,cAAP,CAAjB;AAEAV,EAAAA,IAAI,CAACe,GAAL,CAASL,cAAT;;AAEA,MAAIM,aAAa,GAAGC,aAAIC,WAAJ,CAAgBf,OAAO,CAACC,OAAR,CAAgB,qBAAhB,CAAhB,CAApB;;AACA,MAAIQ,WAAW,GAAG,qBAAOI,aAAa,CAACT,KAAD,CAApB,CAAlB;AAEAP,EAAAA,IAAI,CAACe,GAAL,CAASH,WAAT;AAEAZ,EAAAA,IAAI,CAACmB,EAAL,CAAQT,cAAR,EAAwBE,WAAxB;AAED,CAnCD","sourcesContent":["import Bundler from 'parcel-bundler'\nimport CreateRealContent from 'virtual-dom/create-element.js'\nimport Format from 'pretty'\nimport Pug from 'pug'\nimport Test from 'ava'\n\nimport Plugin from '../../index.js'\n\nTest('Bundler(require.resolve(\\'./source/source.js\\'), { ... })', async (test) => {\n\n  let bundler = new Bundler(require.resolve('./source/source.js'), {\n    'cache': false,\n    'outDir': `${__dirname}/target`,\n    'outFile': 'target.js',\n    'target': 'node',\n    'watch': false,\n    'logLevel': 2\n  })\n\n  await Plugin(bundler)\n  await bundler.bundle()\n  \n  let local = { 'name': 'Bob' }\n  let { default: virtualContentFn } = await import(require.resolve('./target/target.js'))\n\n  let virtualContent = null\n  virtualContent = virtualContentFn(local)\n  virtualContent = virtualContent\n    .map((virtualContent) => CreateRealContent(virtualContent)) \n    .map((realContent) => realContent.toString())\n    .join('\\n')\n\n  virtualContent = Format(virtualContent)\n\n  test.log(virtualContent)\n\n  let realContentFn = Pug.compileFile(require.resolve('./source/source.pug'))\n  let realContent = Format(realContentFn(local))\n\n  test.log(realContent)\n\n  test.is(virtualContent, realContent)\n\n})\n"],"file":"asset.test.js"}